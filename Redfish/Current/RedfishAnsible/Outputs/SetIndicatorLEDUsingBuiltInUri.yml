##
## This Ansible Redfish playbook crawls a Redfish tree using the Ansible built-in uri method
## to discoer resources and then act on them. The crawl process starts at a well-known 
## and standard Redfish location (/redfish/v1/Chassis). Doing so ensures that it works 
## against all types of Redfish implementations.
##
## Then, it discovers all the items present in this standard location and modifies a specific standard 
## Redfish property (IndicatorLED). 
##
## 

## Version 0.123
##
##
- hosts: OneViewManagedBmcs
  connection: local
  gather_facts: False
  vars:
          URL: "https://{{ inventory_hostname }}:{{ ansible_port }}"
          ChassisURI: "{{ URL }}/redfish/v1/Chassis"                 # Redfish standard chassis location
          
  tasks:

          - name: 1.0- Discover chassis collection in standard root service /redfish/v1/Chassis
            uri:
                    url: "{{ ChassisURI }}"
                    return_content: yes
                    validate_certs: no
                    method: GET
                    headers:
                            X-Auth-Token: "{{ token }}"
                            accept: 'application/json'
                            content-type: 'application/json'
            register: ChassisInventory 
            
          - name: 1.1- Save location of each item in the collection
            set_fact:
               ChassisLocations: "{{ ChassisInventory.content | from_json 
                       | json_query('Members[].\"@odata.id\"') }}"
              

          - name: 1.2- Retrieve and print selected properties of each item of the collection
            uri:
                    url: "{{ URL }}/{{ item }}"
                    return_content: yes
                    validate_certs: no
                    method: GET
                    headers:
                            X-Auth-Token: "{{ token }}"
                            accept: 'application/json'
                            content-type: 'application/json'
            with_items: "{{ ChassisLocations }}"
            register: ChassisCollectionProperties 
          
          - debug:
                msg: "{{ ChassisCollectionProperties.results | json_query('[].json.{Id: Id, ChassisType: ChassisType, IndicatorLED: IndicatorLED}') }}"
          
          
          - name: 2.1- PATCH IndicatorLED with new value using Ansible built-in uri module
            uri:
                    url: "{{ ChassisURI }}/{{ item.Id }}"
                    return_content: yes
                    validate_certs: no
                    status_code:
                            - 200
                            - 201
                            - 204      # Needed only when testing against a DMTF Redfish Server simulator
                    method: PATCH
                    body_format: json
                    headers:
                            X-Auth-Token: "{{ token }}"
                            accept: 'application/json'
                            content-type: 'application/json'
                    body:
                            IndicatorLED: "{{ 'Lit' if item.IndicatorLED == 'Off' else 'Off' }}"
            with_items: "{{ ChassisCollectionProperties.results | json_query('[].json.{Id: Id, IndicatorLED: IndicatorLED}') }}"
            

          - name: 3.0- Retrieve IndicatorLED New status to verify previous PATCH
            uri:
                    url: "{{ URL }}/{{ item }}"
                    return_content: yes
                    validate_certs: no
                    method: GET
                    headers:
                            X-Auth-Token: "{{ token }}"
                            accept: 'application/json'
                            content-type: 'application/json'
            with_items: "{{ ChassisLocations }}"
            register: NewChassisCollectionProperties 
          
          - debug:
                msg: "{{ NewChassisCollectionProperties.results | json_query('[].json.{Id: \"@odata.id\", ChassisType: ChassisType, IndicatorLED: IndicatorLED}') }}"

